#Create Cluster on Azure
mmyburgh-aks-cluster

#Container Registry
mikebpme

#Create Outbound IP Address
AKSOutbountIP

#Create Azure QL DB
DB - bpm
Server - mmyburgh-aks-storage



#Setup database
Make sure you specify the correct driver for Azure SQL 
mssql-jdbc-9.2.1.jre8.jar

# Create Azure SQL database with DBAdmin user. 

From Master DB run create db user query
IF SUSER_ID('bpmuser') IS NULL
CREATE LOGIN bpmuser WITH PASSWORD = 'bpmuser'

IF NOT EXISTS (SELECT * FROM sys.sysdatabases WHERE name = N'bpm')
CREATE DATABASE [bpm]
GO


From BPM database execute these statements

ALTER DATABASE [bpm] SET AUTO_UPDATE_STATISTICS ON 
ALTER DATABASE [bpm] SET AUTO_UPDATE_STATISTICS_ASYNC ON 
GO
ALTER DATABASE [bpm] SET ALLOW_SNAPSHOT_ISOLATION ON
GO
ALTER DATABASE [bpm] SET READ_COMMITTED_SNAPSHOT ON 
GO
ALTER DATABASE [bpm] COLLATE Latin1_General_CS_AS 
GO
IF NOT EXISTS (SELECT * from sys.change_tracking_databases WHERE database_id = DB_ID('bpm'))
ALTER DATABASE [bpm] SET CHANGE_TRACKING = ON (CHANGE_RETENTION = 2 DAYS, AUTO_CLEANUP = ON)
GO
-- ALTER LOGIN [bpmuser] WITH DEFAULT_DATABASE = [bpm] -- GO
USE [bpm]
GO
-- Check database user
IF USER_ID('bpmuser') IS NULL
CREATE USER [bpmuser] FOR LOGIN [bpmuser] WITH DEFAULT_SCHEMA = [bpm]
GO
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'bpm')
EXEC( 'CREATE SCHEMA [bpm] AUTHORIZATION [bpmuser]' ) 
GO
-- Add the user and configure
USE [bpm] exec sp_addrolemember 'db_ddladmin', 'bpmuser' 
GO
USE [bpm] exec sp_addrolemember 'db_datareader', 'bpmuser' 
GO
USE [bpm] exec sp_addrolemember 'db_owner', 'bpmuser'
GO
-- Gives user ability control the DBO schema
GRANT CONTROL ON SCHEMA::dbo TO [bpmuser] WITH GRANT OPTION 
GO
-- Needed to execute showplan
GRANT SHOWPLAN TO [bpmuser]
GO
-- Needed to manipulate application roles GRANT ALTER ANY APPLICATION ROLE TO [bpmuser] GO
-- Needed to manipulate roles
GRANT ALTER ANY ROLE TO [bpmuser]
GO
-- Needed to view definitions of objects
GRANT VIEW DEFINITION TO [bpmuser]
GO
-- Needed to create schemas
GRANT CREATE SCHEMA TO [bpmuser]
GO
-- Needed for database-level DMVs
GRANT VIEW DATABASE STATE TO [bpmuser]
GO

GRANT CONTROL ON DATABASE::bpm TO bpmuser




                                                                                                                   
docker run -it --rm tibco/bpm/utility:5.3.0 utility -setupDatabase execute --verbose -dbConfig url='jdbc:sqlserver://mmyburgh-aks-storage.database.windows.net:1433;database=bpm;user=bpmuser@mmyburgh-aks-storage;password=Tibco@123;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;'

docker run -it --rm tibco/bpm/utility:5.3.0 utility -dbConfig url='jdbc:sqlserver://mmyburgh-aks-storage.database.windows.net:1433;database=bpm;user=bpmuser@mmyburgh-aks-storage;password=Tibco@123;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;' -setupAdminUser ldapAlias=system ldapDn=uid=bpm-admin,ou=system displayName=bpm-admin


echo -n bpmuser | base64
YnBtdXNlcg==
echo -n Tibco@123 | base64
VGliY29AMTIz



#get az instance credentials
az aks get-credentials --resource-group mmyburgh-aks-RG --name mmyburgh-aks-cluster


Create a registry in Azure to puch the bpme runtime too before running yaml files
az acr create --resource-group mmyburgh-aks-RG --name mikebpme --sku Standard --subscription a3ba1652-a4cd-4544-aae7-aade9b9ba26e

# Enable admin
# https://docs.microsoft.com/en-us/azure/container-registry/container-registry-authentication?tabs=azure-cli#admin-account
az acr update -n mikebpme --admin-enabled true

# Get ACR registry username
$ACR_UNAME=$(az acr credential show -n mikebpme --query="username" -o tsv)

# Get ACR registry password
$ACR_PASSWD=$(az acr credential show -n mikebpme --query="passwords[0].value" -o tsv)

# ACR Login
docker login mikebpme.azurecr.io -u $ACR_UNAME -p $ACR_PASSWD

#creating ther az docker image
docker tag tibco/bpm/runtime:5.3.0 mikebpme.azurecr.io/bpm/runtime:5.3.0

#puch BPME image to azure cluster
docker push mikebpme.azurecr.io/bpm/runtime:5.3.0

#Create Namespace bpm
kubectl apply -f bpm-namespace.yaml

#create secret
kubectl create secret docker-registry secret-acr --docker-server=mikebpme.azurecr.io --docker-username=mikebpme --docker-password=Ip5WbYU+5/87MvlzZgxCBCkKNH3ZIQmJ -n bpm

#Configure load balancer - public-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: public-svc
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: public-app


kubectl apply -f public-svc.yaml

#Update load balancer
az aks update --resource-group mmyburgh-aks-RG --name mmyburgh-aks-cluster --load-balancer-managed-outbound-ip-count 2


az aks get-credentials --resource-group mmyburgh-aks-RG --name mmyburgh-aks-cluster
az acr create --resource-group mmyburgh-aks-RG --name mikebpme --sku Standard --subscription a3ba1652-a4cd-4544-aae7-aade9b9ba26e


#Create A public IP, SKU must be standard (In this example name of the IP is AKSOutboundIP, you can change the name)
az network public-ip create -g mmyburgh-aks-RG -n AKSOutboundIP --allocation-method Static --sku Standard


#Get the ID of the public IP
$PUBLIC_IP_ID=$(az network public-ip show -g mmyburgh-aks-RG -n AKSOutboundIP --query id -o tsv)

#Assign outbound public IP to AKS
az aks create --resource-group mmyburgh-aks-RG --name mmyburgh-aks-cluster --node-count 2 --generate-ssh-keys  --load-balancer-outbound-ips /subscriptions/a3ba1652-a4cd-4544-aae7-aade9b9ba26e/resourceGroups/mmyburgh-aks-RG/providers/Microsoft.Network/publicIPAddresses/AKSOutboundIP

#Or Update AKS
az aks update  --resource-group mmyburgh-aks-RG  --name mmyburgh-aks-cluster  --load-balancer-outbound-ips /subscriptions/a3ba1652-a4cd-4544-aae7-aade9b9ba26e/resourceGroups/mmyburgh-aks-RG/providers/Microsoft.Network/publicIPAddresses/AKSOutboundIP

#IP Address
az network public-ip show --ids /subscriptions/a3ba1652-a4cd-4544-aae7-aade9b9ba26e/resourceGroups/mmyburgh-aks-RG/providers/Microsoft.Network/publicIPAddresses/AKSOutboundIP --query ipAddress -o tsv


Run yaml files

kubectl apply -f bpm-namespace.yaml
kubectl apply -f bpm-secrets-ldap.yaml
kubectl apply -f bpm-secrets-db.yaml


#Update the bpm-deployment.yaml 
#if you dont use postgres, you need to add the driver class you will be using e.g.
env:
          - name: JDBC_DRIVERCLASS
            value: com.microsoft.sqlserver.jdbc.SQLServerDriver
          - name: JDBC_URL
            value: "jdbc:sqlserver://mmyburgh-aks-storage.database.windows.net:1433;database=bpm"
          - name: LDAP_SYSTEM_ALIAS
            value: "system"
          - name: LDAP_SYSTEM_URL
            value: "ldap://137.135.74.160:10389/ou=system"

kubectl apply -f bpm-deployment.yaml


kubectl -n bpm get pods
kubectl logs  -n bpm



kubectl describe pod bpm-deployment-68fdfb49f8-lgxv6 -n bpm


to delete a namespace and registry
kubectl delete -f bpm-namespace.yaml


Run yaml files

kubectl apply -f bpm-namespace.yaml
kubectl apply -f bpm-secrets-ldap.yaml
kubectl apply -f bpm-secrets-db.yaml
kubectl apply -f bpm-deployment.yaml


    kubectl -n bpm get pods


kubectl describe pod bpm-deployment-68fdfb49f8-lgxv6 -n bpm


to delete a namespace and registry
kubectl delete -f bpm-namespace.yaml
